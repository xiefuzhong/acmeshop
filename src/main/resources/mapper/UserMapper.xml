<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.acme.acmemall.dao.UserMapper">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.acme.acmemall.model.LoginUserVo" id="userMap">
        <result property="userId" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="gender" column="gender"/>
        <result property="birthday" column="birthday"/>
        <result property="register_time" column="register_time"/>
        <result property="last_login_time" column="last_login_time"/>
        <result property="last_login_ip" column="last_login_ip"/>
        <result property="user_level_id" column="user_level_id"/>
        <result property="nickname" column="nickname"/>
        <result property="mobile" column="mobile"/>
        <result property="register_ip" column="register_ip"/>
        <result property="avatar" column="avatar"/>
        <result property="weixin_openid" column="weixin_openid"/>
        <result property="idCard" column="id_card"/>
        <result property="promoterId" column="promoter_id"/>
        <result property="promoterName" column="promoter_name"/>
        <result property="isReal" column="is_real"/>
        <result property="is_return_cash" column="is_return_cash"/>
        <result property="first_buy_money" column="first_buy_money"/>
        <result property="qrCode" column="qr_code"/>
        <result property="fid" column="fid"/>
        <result property="fx1" column="fx1"/>
        <result property="fx2" column="fx2"/>

        <result property="group.id" column="group_id"/>
        <result property="group.group_name" column="group_name"/>
        <result property="labels" column="label"/>


        <association property="group" javaType="com.acme.acmemall.model.UserGroup">
            <id property="id" column="group_id"></id>
            <result property="group_name" column="group_name"></result>
        </association>
    </resultMap>

    <select id="queryObject" resultMap="userMap">
        select * from t_acme_mall_user where id = #{value}
    </select>

    <select id="queryByOpenId" resultMap="userMap">
        select * from t_acme_mall_user
        <where>
            and `weixin_openid` = #{openId}
        </where>
    </select>

    <select id="queryList" resultMap="userMap">
        SELECT * FROM t_acme_mall_user
        <where>
            <if test="userId != null">
                AND `id` = #{userId}
                OR `mobile` = #{userId}
            </if>
            <if test="mobile != null">
                AND `mobile` = #{mobile}
            </if>
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryTotal" resultType="int">
        select count(*) from t_acme_mall_user
    </select>

    <insert id="save" parameterType="com.acme.acmemall.model.LoginUserVo" useGeneratedKeys="true" keyProperty="userId">
        insert into t_acme_mall_user
        (
        `username`,
        `password`,
        `gender`,
        `birthday`,
        `register_time`,
        `last_login_time`,
        `last_login_ip`,
        `user_level_id`,
        `nickname`,
        `mobile`,
        `register_ip`,
        `avatar`,
        `weixin_openid`,
        `promoter_id`,
        `promoter_name`,
        `qr_code`
        )
        values
        (
        #{username},
        #{password},
        #{gender},
        #{birthday},
        #{register_time},
        #{last_login_time},
        #{last_login_ip},
        #{user_level_id},
        #{nickname},
        #{mobile},
        #{register_ip},
        #{avatar},
        #{weixin_openid},
        #{promoterId},
        #{promoterName},
        #{qrCode}
        )
    </insert>

    <update id="update" parameterType="com.acme.acmemall.model.LoginUserVo">
        update t_acme_mall_user
        <set>
            <if test="username != null">`username` = #{username},</if>
            <if test="password != null">`password` = #{password},</if>
            <if test="gender != null">`gender` = #{gender},</if>
            <if test="birthday != null">`birthday` = #{birthday},</if>
            <if test="register_time != null">`register_time` = #{register_time},</if>
            <if test="last_login_time != null">`last_login_time` = #{last_login_time},</if>
            <if test="last_login_ip != null">`last_login_ip` = #{last_login_ip},</if>
            <if test="user_level_id != null">`user_level_id` = #{user_level_id},</if>
            <if test="nickname != null">`nickname` = #{nickname},</if>
            <if test="mobile != null">`mobile` = #{mobile},</if>
            <if test="register_ip != null">`register_ip` = #{register_ip},</if>
            <if test="avatar != null">`avatar` = #{avatar},</if>
            <if test="weixin_openid != null">`weixin_openid` = #{weixin_openid},</if>
            <if test="idCard != null">`id_card` = #{idCard},</if>
            <if test="promoterId != 0">`promoter_id` = #{promoterId},</if>
            <if test="promoterName != null">`promoter_name` = #{promoterName},</if>
            <if test="isReal != null">`is_real` = #{isReal},</if>
            <if test="is_return_cash != null">`is_return_cash` = #{is_return_cash},</if>
            <if test="first_buy_money != null">`first_buy_money` = #{first_buy_money},</if>
            <if test="qrCode != null">`qr_code` = #{qrCode},</if>
            <if test="realName != null">`real_name` = #{realName},</if>
            <if test="groupId != null">`group_id` = #{groupId},</if>
            <if test="groupName != null">`group_name` = #{groupName},</if>
            <if test="labels != null">`label` = #{labels},</if>
        </set>
        where id = #{userId}
    </update>

    <update id="updatefx" parameterType="com.acme.acmemall.model.LoginUserVo">
        update t_acme_mall_user
        <set>
            <if test="fx1 != null">`fx1` = #{fx1},</if>
            <if test="fx2 != null">`fx2` = #{fx2},</if>
        </set>
        where id = #{userId}
    </update>

    <select id="queryShareGoods" resultType="com.acme.acmemall.model.UserGoods">
        SELECT
        `user_goods_id` as userGoodsId,
        `user_id` as userId,
        `goods_id` as goodsId,
        `name`,
        `goods_brief` as goodsBrief,
        `retail_price` as retailPrice,
        `market_price` as marketPrice,
        `primary_pic_url` as primaryPicUrl
        FROM `t_acme_mall_user_goods`
        <where>
            AND user_id= #{userId}
            AND goods_id=#{goodsId}
        </where>
    </select>

    <select id="queryUserShareGoods" resultType="com.acme.acmemall.model.UserGoods">
        SELECT
        `user_goods_id` as userGoodsId,
        `user_id` as userId,
        `goods_id` as goodsId,
        `name`,
        `goods_brief` as goodsBrief,
        `retail_price` as retailPrice,
        `market_price` as marketPrice,
        `primary_pic_url` as primaryPicUrl
        FROM `t_acme_mall_user_goods`
        <where>
            AND user_id= #{userId}
            <if test="goodsId!='' and goodsId != null">
                and goods_id=#{goodsId}
            </if>
        </where>
    </select>

    <insert id="saveUserGoods">
        INSERT INTO `t_acme_mall_user_goods`
        (
        `user_id`,
        `goods_id`,
        `name`,
        `goods_brief`,
        `retail_price`,
        `market_price`,
        `primary_pic_url`
        )
        VALUES
        (
        #{userId} ,
        #{goodsId} ,
        #{name} ,
        #{goodsBrief} ,
        #{retailPrice} ,
        #{marketPrice} ,
        #{primaryPicUrl}
        )
    </insert>

    <delete id="deleteShareGoods">
        delete from t_acme_mall_user_goods where user_id= #{userId} AND goods_id=#{goodsId}
    </delete>


    <resultMap type="com.acme.acmemall.model.LoginUserVo" id="loginUserMap">
        <result property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="mobile" column="mobile"/>
        <result property="avatar" column="avatar"/>
        <result property="idCard" column="id_card"/>
        <result property="isReal" column="is_real"/>
        <result property="merchantId" column="merchant_id"/>
    </resultMap>

    <select id="queryByMobile" resultMap="loginUserMap">
        SELECT
        u.user_id,
        u.username,
        u.mobile,
        u.password,
        u.merchant_id
        FROM sys_user u
        <where>
            AND u.mobile = #{mobile} AND u.password=#{password}
        </where>
    </select>

    <select id="queryByUserId" resultMap="loginUserMap">
        SELECT
        u.user_id,
        u.username,
        u.mobile,
        u.password,
        u.merchant_id
        FROM sys_user u
        <where>
            AND u.user_id = #{userId}
            <if test="merchantId != null || merchantId !=''">
                AND u.merchant_id= #{merchantId}
            </if>

        </where>
    </select>

    <select id="findByUserId" resultMap="loginUserMap">
        SELECT
        u.user_id,
        u.username,
        u.mobile,
        u.password,
        u.merchant_id
        FROM sys_user u
        <where>
            AND u.user_id = #{userId}
        </where>

    </select>

    <!--    是否是admin -->
    <select id="findRoleByUserId" resultType="map">
        select
        count(1) as cnt
        from
        sys_user_role
        where
        user_id = #{userId}
        and role_id = 5
    </select>


    <!--    根据用户ID统计订单数目和金额-->
    <select id="countByUserId" resultType="map">
        SELECT
        count(id) as value,
        'all_count' as title
        FROM
        t_acme_mall_order
        WHERE
        user_id = #{userId}
        AND order_status in (200, 201, 300)
        group by
        id,
        title
        UNION all
        SELECT
        count(id) as value,
        'month_count' as title
        FROM
        t_acme_mall_order
        WHERE
        user_id = #{userId}
        AND order_status in (200, 201, 300)
        and DATE_FORMAT(add_time, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')
        group by
        id,
        title
        union all
        SELECT
        sum(order_price) as value,
        'all_total' as title
        FROM
        t_acme_mall_order
        WHERE
        user_id = #{userId}
        AND order_status in (200, 201, 300)
        group by
        id,
        title
        union all
        SELECT
        sum(order_price) as value,
        'month_total' as title
        FROM
        t_acme_mall_order
        WHERE
        user_id = #{userId}
        AND order_status in (200, 201, 300)
        and DATE_FORMAT(add_time, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')
        group by
        id,
        title

    </select>
    <update id="updateUserLabels">
        update t_acme_mall_user
        <set>
            <if test="labels != null">`label` = #{labels},</if>
        </set>
        where id in
        <foreach item="userId" collection="userIds" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </update>

    <update id="updateUserGroup">
        update t_acme_mall_user
        <set>
            <if test="group != null">`group_id` = #{group.id},</if>
            <if test="group != null">`group_name` = #{group.group_name},</if>
        </set>
        where id in
        <foreach item="userId" collection="userIds" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </update>
    <!--    t_acme_mall_user_group-->
    <insert id="batchAddGroup" parameterType="list">
        insert into t_acme_mall_user_group(group_name)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            ( #{item.group_name})
        </foreach>
        ON DUPLICATE KEY UPDATE
        group_name = VALUES(group_name)
    </insert>

    <delete id="batchDeleteGroup">
        delete from t_acme_mall_user_group where id in
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <select id="queryGroup" resultType="com.acme.acmemall.model.UserGroup">
        select
        id,
        group_name
        from
        t_acme_mall_user_group
        <where>
            id > 0
        </where>
    </select>

    <!--    t_acme_mall_user_label-->
    <insert id="batchAddLabel" parameterType="list">
        insert into t_acme_mall_user_label(title,category_id,category_name)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            ( #{item.title},#{item.category_id},#{item.category_name})
        </foreach>
        ON DUPLICATE KEY UPDATE
        title = VALUES(title)
    </insert>
    <delete id="batchDeleteLabel">
        delete from t_acme_mall_user_label where id in
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="queryLabel" resultType="com.acme.acmemall.model.UserLabel">
        select
        id,
        title,
        category_id,
        category_name
        from
        t_acme_mall_user_label
        <where>
            id > 0
        </where>
    </select>

    <resultMap id="memberMap" type="com.acme.acmemall.model.MembersVo">
        <id property="userId" column="user_id"/>
        <result property="userName" column="username"/>
        <result property="email" column="email"/>
        <result property="mobile" column="mobile"/>
        <result property="avatar" column="avatar"/>
        <result property="status" column="status"/>
        <result property="addTime" column="create_time"/>
        <result property="operatorId" column="create_user_id"/>

        <collection property="roles" ofType="com.acme.acmemall.model.RoleVo">
            <id property="id" column="role_id"/>
            <result property="roleName" column="role_name"/>
            <!--            <result property="roleType" column="is_admin"/>-->
            <result property="description" column="remark"/>
        </collection>
    </resultMap>
    <!--    querySysMemberById-->

    <select id="querySysMemberById" resultMap="memberMap">
        SELECT
        a.*,
        c.*
        from
        sys_user a
        left JOIN sys_user_role b on a.user_id = b.user_id
        left JOIN sys_role c on b.role_id = c.role_id
        <where>
            AND a.user_id = #{userId}
        </where>
    </select>

    <select id="querySysMembers" resultMap="memberMap">
        SELECT
        a.*,
        c.*
        from
        sys_user a
        left JOIN sys_user_role b on a.user_id = b.user_id
        left JOIN sys_role c on b.role_id = c.role_id
        <where>
            AND a.status = 1
        </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by a.user_id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <insert id="addSysMember" parameterType="com.acme.acmemall.model.MembersVo">
        INSERT INTO sys_user
        (
        `user_id`,
        `username`,
        `password`,
        `mobile`,
        `status`,
        `create_time`,
        `create_user_id`
        )
        VALUES
        (
        #{userId},
        #{userName},
        #{password},
        #{mobile},
        #{status},
        #{addTime},
        #{operatorId}
        )
    </insert>
</mapper>